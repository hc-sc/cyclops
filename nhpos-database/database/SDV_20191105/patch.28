prompt connect as nhpdweb_buffer
--conn nhpdweb_buffer
-----------------------------------
--patch #28
-- date: 2019/11/06
-- fixes: 
----------------------------------
spool patch_28.log
prompt Patch 28

prompt ---------
prompt create temp source ingred matrix with correct data types
create table x_ingredient_matrix_x as
select t.entry_type,
       t.ingredient_role,
       t.ingredient_class,
       t.ingredient_category,
       t.ingredient_type_ing_type,
       t.ing_name_type,
       t.mi_doseid,
       t.product_mono_code,
       t.mono_code,
       t.source_group_code,
       t.group_rule_group_id,
       t.rule_group_id,
       t.version,
to_number(t.organism_id) organism_id,
to_number(t.ingred_id_nhpid) ingred_id_nhpid,
       t.nhpid_name,
       t.nhpid_name_fr,
       t.ingred_dose_type,
to_number(qdu_min) qdu_min,
to_number(qdu_max) qdu_max, 
to_number(regexp_substr(t.qie_min,'[0-9.]+')) qie_min,
to_number(regexp_substr(t.qie_min,'[0-9.]+')) qie_max,
       t.quantity_units,
       t.dose_cat,
to_number(min_freq) min_freq, 
to_number(max_freq) max_freq, 
       t.frequency_interval,
       t.frequency_interval_fr,
       t.use_code,
       t.use_decode,
       t.duration_code,
       t.duration_decode,
       t.risk_code,
       t.risk_decode,
       t.dfu_group_code,
       t.dfu_decode,
       t.prep_group_code,
       t.prep_group_decode,
       t.sub_pop_code,
       t.sub_pop_decode,
to_number(ratio_min) ratio_min, 
to_number(ratio_max) ratio_max,
       t.alt_mi_doseid,
       t.dosage_form_group_code,
       t.storage_conditions_group_code,
       t.combo_dose_code,
       t.prod_mono_id,
       t.ingred_grp_grp_id,
       t.roa,
       t.adminrt_id,
       t.row_id,
       t.useracc_id,
       t.creation_date,
       t.lastupdate_date 
from x_ingredient_matrix t
;

prompt drop keys and triggers on target table
-- Drop primary, unique and foreign key constraints 
alter table X_INGREDIENT_MATRIX drop constraint X_INGREDIENT_MATRIX_PK cascade drop index;
alter table X_INGREDIENT_MATRIX drop constraint X_INGREDIENT_MATRIX_FK1;
alter table X_INGREDIENT_MATRIX drop constraint X_INGREDIENT_MATRIX_FK10;
alter table X_INGREDIENT_MATRIX drop constraint X_INGREDIENT_MATRIX_FK11;
alter table X_INGREDIENT_MATRIX drop constraint X_INGREDIENT_MATRIX_FK12;
alter table X_INGREDIENT_MATRIX drop constraint X_INGREDIENT_MATRIX_FK2;
alter table X_INGREDIENT_MATRIX drop constraint X_INGREDIENT_MATRIX_FK3;
alter table X_INGREDIENT_MATRIX drop constraint X_INGREDIENT_MATRIX_FK4;
alter table X_INGREDIENT_MATRIX drop constraint X_INGREDIENT_MATRIX_FK5;
alter table X_INGREDIENT_MATRIX drop constraint X_INGREDIENT_MATRIX_FK6;
alter table X_INGREDIENT_MATRIX drop constraint X_INGREDIENT_MATRIX_FK7;
alter table X_INGREDIENT_MATRIX drop constraint X_INGREDIENT_MATRIX_FK8;
alter table X_INGREDIENT_MATRIX drop constraint X_INGREDIENT_MATRIX_FK9;
drop trigger X_INGREDIENT_MATRIX_TRG;

prompt rename target/source tables
rename X_INGREDIENT_MATRIX to X_INGREDIENT_MATRIX_ORIG;
rename X_INGREDIENT_MATRIX_X to X_INGREDIENT_MATRIX;

prompt recreate keys and triggers
alter table X_INGREDIENT_MATRIX add constraint X_INGREDIENT_MATRIX_PK primary key (ROW_ID) using index;
alter table X_INGREDIENT_MATRIX add constraint X_INGREDIENT_MATRIX_FK1 foreign key (MONO_CODE, PRODUCT_MONO_CODE)
  references X_PRODUCT_MONOGRAPH_REF (MONO_CODE, PRODUCT_MONO_CODE);
alter table X_INGREDIENT_MATRIX add constraint X_INGREDIENT_MATRIX_FK10 foreign key (DOSAGE_FORM_GROUP_CODE)
  references X_DOSAGE_FORM_GROUP_REF (DOSAGE_FORM_GROUP_CODE);
alter table X_INGREDIENT_MATRIX add constraint X_INGREDIENT_MATRIX_FK11 foreign key (PREP_GROUP_CODE)
  references X_PREP_METHOD_GROUP_REF (PREP_GROUP_CODE);
alter table X_INGREDIENT_MATRIX add constraint X_INGREDIENT_MATRIX_FK12 foreign key (ADMINRT_ID)
  references NHPDWEB_OWNER.ADMINISTRATION_ROUTES (ADMINRT_ID);
alter table X_INGREDIENT_MATRIX add constraint X_INGREDIENT_MATRIX_FK2 foreign key (RULE_GROUP_ID, GROUP_RULE_GROUP_ID)
  references X_INGREDIENT_GRP_GRP_REF (GROUP_ID, GROUP_GROUP_ID);
alter table X_INGREDIENT_MATRIX add constraint X_INGREDIENT_MATRIX_FK3 foreign key (SOURCE_GROUP_CODE)
  references X_SOURCE_GROUPS_REF (SOURCE_GROUP_CODE);
alter table X_INGREDIENT_MATRIX add constraint X_INGREDIENT_MATRIX_FK4 foreign key (DURATION_CODE)
  references X_DURATION (DURATION_CODE);
alter table X_INGREDIENT_MATRIX add constraint X_INGREDIENT_MATRIX_FK5 foreign key (SUB_POP_CODE)
  references X_SUB_POP (SUB_POP_CODE);
alter table X_INGREDIENT_MATRIX add constraint X_INGREDIENT_MATRIX_FK6 foreign key (USE_CODE)
  references X_USE (USE_CODE);
alter table X_INGREDIENT_MATRIX add constraint X_INGREDIENT_MATRIX_FK7 foreign key (RISK_CODE)
  references X_RISK (RISK_CODE);
alter table X_INGREDIENT_MATRIX add constraint X_INGREDIENT_MATRIX_FK8 foreign key (STORAGE_CONDITIONS_GROUP_CODE)
  references X_STORAGE_COND_GROUP_REF (STORAGE_COND_GROUP_CODE);
alter table X_INGREDIENT_MATRIX add constraint X_INGREDIENT_MATRIX_FK9 foreign key (DFU_GROUP_CODE)
  references X_DFU_GROUP_REF (DFU_GROUP_CODE);

prompt create trigger
CREATE OR REPLACE TRIGGER "X_INGREDIENT_MATRIX_TRG"
before insert or update on X_INGREDIENT_MATRIX
for each row
begin
  if INSERTING then
    if :new.ROW_ID is null then
      select X_INGREDIENT_MATRIX_SEQ.nextval into :new.ROW_ID from dual;
    end if;
    :new.creation_date := sysdate;
  end if;
  IF :new.dfu_group_code IS NOT NULL AND
     (
       :new.dfu_group_code != NVL(:old.dfu_group_code, 'XXXXXXxxxx')
       OR
       :new.dfu_decode IS NULL
     ) THEN
    BEGIN
      SELECT dfu_group_decode
        INTO :new.dfu_decode
        FROM x_dfu_group_ref
       WHERE dfu_group_code  =  :new.dfu_group_code;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.dfu_group_code IS NULL THEN
--    :new.dfu_decode := NULL;
  END IF;
  IF :new.duration_code IS NOT NULL AND
     (
       :new.duration_code != NVL(:old.duration_code, 'XXXXxxxx')
       OR
       :new.duration_decode IS NULL
     ) THEN
    BEGIN
      SELECT duration_decode
        INTO :new.duration_decode
        FROM x_duration
       WHERE duration_code  =  :new.duration_code;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.duration_code IS NULL THEN
--    :new.duration_decode  :=  NULL;
  END IF;
  IF :new.use_code IS NOT NULL AND
     (
       :new.use_code != NVL(:old.use_code, 'XXXXXXxxxx')
       OR
       :new.use_decode IS NULL
      ) THEN
    BEGIN
      SELECT use_decode
        INTO :new.use_decode
        FROM x_use
       WHERE use_code  =  :new.use_code;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.use_code IS NULL THEN
--    :new.use_decode := NULL;
  END IF;
  IF :new.risk_code IS NOT NULL AND
     (
       :new.risk_code != NVL(:old.risk_code, 'XXXXXXxxxx')
       OR
       :new.risk_decode IS NULL
     ) THEN
    BEGIN
      SELECT risk_decode
        INTO :new.risk_decode
        FROM x_risk
       WHERE risk_code  =  :new.risk_code;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.risk_code IS NULL THEN
--    :new.risk_decode := NULL;
  END IF;
  IF :new.prep_group_code IS NOT NULL AND
     (
       :new.prep_group_code != NVL(:old.prep_group_code, 'XXXXXXxxxx')
       OR
       :new.prep_group_decode IS NULL
     ) THEN
    BEGIN
      SELECT prep_group_description
        INTO :new.prep_group_decode
        FROM x_prep_method_group_ref
       WHERE prep_group_code  =  :new.prep_group_code;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.prep_group_code IS NULL THEN
--    :new.prep_group_decode := NULL;
  END IF;
  IF :new.sub_pop_code IS NOT NULL AND
     (
       :new.sub_pop_code != NVL(:old.sub_pop_code, 'XXXXXXxxxx')
       OR
       :new.sub_pop_decode IS NULL
     ) THEN
    BEGIN
      SELECT sub_pop_decode
        INTO :new.sub_pop_decode
        FROM x_sub_pop
       WHERE sub_pop_code  =  :new.sub_pop_code;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.sub_pop_code IS NULL THEN
--    :new.sub_pop_decode := NULL;
  END IF;
  IF :new.ing_name_type IS NOT NULL AND
     (
       :new.ing_name_type != NVL(:old.ing_name_type, 'XXXXXXxxxx')
       OR
       :new.ingredient_category IS NULL
     ) THEN
    BEGIN
      SELECT ingredcat_name_eng
        INTO :new.ingredient_category
        FROM ingredient_categories
       WHERE ingredcat_code  =  :new.ing_name_type;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.ing_name_type IS NULL THEN
--    :new.ingredient_category := NULL;
  END IF;
  IF :new.ingred_grp_grp_id IS NOT NULL AND
     (
       :new.ingred_grp_grp_id != NVL(:old.ingred_grp_grp_id,-1)
       OR
       :new.group_rule_group_id IS NULL
       OR
       :new.rule_group_id IS NULL
     ) THEN
    BEGIN
      SELECT group_group_id,
             group_id
        INTO :new.group_rule_group_id,
             :new.rule_group_id
        FROM x_ingredient_grp_grp_ref
       WHERE row_id  =  :new.ingred_grp_grp_id;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.ingred_grp_grp_id IS NULL THEN
--    :new.group_rule_group_id  :=  NULL;
--    :new.rule_group_id        :=  NULL;
  END IF;
  IF :new.ingred_id_nhpid IS NOT NULL AND
      (
        :new.ingred_id_nhpid != NVL(:old.ingred_id_nhpid, -1)
        OR
        :new.nhpid_name IS NULL
        OR
        :new.nhpid_name_fr IS NULL
      ) THEN
    BEGIN
      SELECT ingred_authorized_name_eng,
             ingred_authorized_name_fr
        INTO :new.nhpid_name,
             :new.nhpid_name_fr
        FROM ingredients
       WHERE ingred_id  =  :new.ingred_id_nhpid;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.ingred_id_nhpid IS NULL THEN
--    :new.nhpid_name     :=  NULL;
--    :new.nhpid_name_fr  :=  NULL;
  END IF;
  IF :new.prod_mono_id IS NOT NULL AND
     (
       :new.prod_mono_id != NVL(:old.prod_mono_id,-1)
       OR
       :new.product_mono_code IS NULL
       OR
       :new.mono_code IS NULL
     ) THEN
    BEGIN
      SELECT product_mono_code,
             mono_code
        INTO :new.product_mono_code,
             :new.mono_code
        FROM x_product_monograph_ref
       WHERE row_id  =  :new.prod_mono_id;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.prod_mono_id IS NULL THEN
--    :new.product_mono_code := NULL;
--    :new.mono_code         := NULL;
  END IF;
  IF :new.adminrt_id IS NOT NULL AND
      (
         :new.adminrt_id != NVL(:old.adminrt_id, -1)
         OR
         :new.roa IS null
       ) THEN
    BEGIN
      SELECT adminrt_name_eng
        INTO :new.roa
        FROM administration_routes
       WHERE adminrt_id  =  :new.adminrt_id;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.adminrt_id IS NULL THEN
--    :new.roa    := NULL;
  END IF;
  :new.lastupdate_date := sysdate;
  :new.useracc_id := nvl(NHPID_APEX_UTIL.GET_APEX_USER_ID,0);
end;
/

prompt grant table privileges 
grant select on X_INGREDIENT_MATRIX to NHPDWEB_OWNER;
grant select on X_INGREDIENT_MATRIX to NHPDWEB_USER;
grant select, insert, update, delete, alter, index on X_INGREDIENT_MATRIX to NHPID_APEX;
grant select, insert, update, delete, alter on X_INGREDIENT_MATRIX to RL__NHPDWEB_ADMIN;
grant select on X_INGREDIENT_MATRIX to RL__NHPDWEB_READ;


prompt ---------
prompt create temp source sub ingred matrix with correct data types
create table X_SUB_INGREDIENT_MATRIX_X as
select t.subing_dose_id,
       t.alt_subing_dose_id,
       t.product_mono_code,
       t.mono_code,
       t.source_group_code,
       t.group_rule_group_id,
       t.rule_group_id,
       t.version,
       t.conversion_id,
to_number(t.ingred_id_nhpid) ingred_id_nhpid,
       t.parent_nhpid_name,
       t.combo_dose_code,
       t.subing_name_type,
       t.subing_name_nhpid,
to_number(t.subing_id_nhpid) subing_id_nhpid,
       t.subing_dose_type,
to_number(qdu_min) qdu_min,
to_number(qdu_max) qdu_max, 
to_number(t.qie_min) qie_min,
to_number(t.qie_min) qie_max,
       t.quantity_units,
       t.dose_cat,
to_number(min_freq) min_freq, 
to_number(max_freq) max_freq, 
       t.freq_interval,
       t.freq_interval_fr,
       t.use_code,
       t.use_decode,
       t.duration_code,
       t.risk_code,
       t.risk_decode,
       t.dfu_code,
       t.dfu_decode,
       t.prep_group_code,
       t.subing_prep_group_code,
       t.sub_pop_code,
       t.sub_pop_decode,
to_number(ratio_min) ratio_min, 
to_number(ratio_max) ratio_max,
       t.dosage_form_group_code,
       t.storage_condition_group_code,
       t.notes_do_not_load,
       t.prod_mono_id,
       t.ingred_grp_grp_id,
       t.roa,
       t.adminrt_id,
       t.row_id,
       t.useracc_id,
       t.creation_date,
       t.lastupdate_date
from X_SUB_INGREDIENT_MATRIX t
;

prompt drop primary, unique and foreign key constraints and indexes
alter table X_SUB_INGREDIENT_MATRIX
  drop constraint X_SUB_INGREDIENT_MATRIX_PK cascade drop index;
alter table X_SUB_INGREDIENT_MATRIX
  drop constraint X_SUB_INGREDIENT_MATRIX_FK1;
alter table X_SUB_INGREDIENT_MATRIX
  drop constraint X_SUB_INGREDIENT_MATRIX_FK10;
alter table X_SUB_INGREDIENT_MATRIX
  drop constraint X_SUB_INGREDIENT_MATRIX_FK11;
alter table X_SUB_INGREDIENT_MATRIX
  drop constraint X_SUB_INGREDIENT_MATRIX_FK12;
alter table X_SUB_INGREDIENT_MATRIX
  drop constraint X_SUB_INGREDIENT_MATRIX_FK13;
alter table X_SUB_INGREDIENT_MATRIX
  drop constraint X_SUB_INGREDIENT_MATRIX_FK14;
alter table X_SUB_INGREDIENT_MATRIX
  drop constraint X_SUB_INGREDIENT_MATRIX_FK2;
alter table X_SUB_INGREDIENT_MATRIX
  drop constraint X_SUB_INGREDIENT_MATRIX_FK3;
alter table X_SUB_INGREDIENT_MATRIX
  drop constraint X_SUB_INGREDIENT_MATRIX_FK4;
alter table X_SUB_INGREDIENT_MATRIX
  drop constraint X_SUB_INGREDIENT_MATRIX_FK5;
alter table X_SUB_INGREDIENT_MATRIX
  drop constraint X_SUB_INGREDIENT_MATRIX_FK6;
alter table X_SUB_INGREDIENT_MATRIX
  drop constraint X_SUB_INGREDIENT_MATRIX_FK7;
alter table X_SUB_INGREDIENT_MATRIX
  drop constraint X_SUB_INGREDIENT_MATRIX_FK8;
alter table X_SUB_INGREDIENT_MATRIX
  drop constraint X_SUB_INGREDIENT_MATRIX_FK9;
drop index X_SUB_INGREDIENT_MATRIX_INDEX1;
drop index X_SUB_INGREDIENT_MATRIX_INDEX2;
drop trigger X_SUB_INGREDIENT_MATRIX_TRG;

prompt rename tables
rename X_SUB_INGREDIENT_MATRIX to X_SUB_INGREDIENT_MATRIX_ORIG;
rename X_SUB_INGREDIENT_MATRIX_X to X_SUB_INGREDIENT_MATRIX;

prompt create/Recreate indexes 
create index X_SUB_INGREDIENT_MATRIX_INDEX1 on X_SUB_INGREDIENT_MATRIX (MONO_CODE, PRODUCT_MONO_CODE)
 tablespace NHPD_INDEX;
create index X_SUB_INGREDIENT_MATRIX_INDEX2 on X_SUB_INGREDIENT_MATRIX (PREP_GROUP_CODE)
  tablespace NHPD_INDEX;
-- Create/Recreate primary, unique and foreign key constraints 
alter table X_SUB_INGREDIENT_MATRIX
  add constraint X_SUB_INGREDIENT_MATRIX_PK primary key (ROW_ID)  using index ;
alter table X_SUB_INGREDIENT_MATRIX
  add constraint X_SUB_INGREDIENT_MATRIX_FK1 foreign key (MONO_CODE, PRODUCT_MONO_CODE)
  references X_PRODUCT_MONOGRAPH_REF (MONO_CODE, PRODUCT_MONO_CODE);
alter table X_SUB_INGREDIENT_MATRIX
  add constraint X_SUB_INGREDIENT_MATRIX_FK10 foreign key (DOSAGE_FORM_GROUP_CODE)
  references X_DOSAGE_FORM_GROUP_REF (DOSAGE_FORM_GROUP_CODE);
alter table X_SUB_INGREDIENT_MATRIX
  add constraint X_SUB_INGREDIENT_MATRIX_FK11 foreign key (SUBING_PREP_GROUP_CODE)
  references X_PREP_METHOD_GROUP_REF (PREP_GROUP_CODE);
alter table X_SUB_INGREDIENT_MATRIX
  add constraint X_SUB_INGREDIENT_MATRIX_FK12 foreign key (PREP_GROUP_CODE)
  references X_PREP_METHOD_GROUP_REF (PREP_GROUP_CODE);
alter table X_SUB_INGREDIENT_MATRIX
  add constraint X_SUB_INGREDIENT_MATRIX_FK13 foreign key (DFU_CODE)
  references X_DFU_GROUP_REF (DFU_GROUP_CODE);
alter table X_SUB_INGREDIENT_MATRIX
  add constraint X_SUB_INGREDIENT_MATRIX_FK14 foreign key (ADMINRT_ID)
  references NHPDWEB_OWNER.ADMINISTRATION_ROUTES (ADMINRT_ID);
alter table X_SUB_INGREDIENT_MATRIX
  add constraint X_SUB_INGREDIENT_MATRIX_FK2 foreign key (RULE_GROUP_ID, GROUP_RULE_GROUP_ID)
  references X_INGREDIENT_GRP_GRP_REF (GROUP_ID, GROUP_GROUP_ID);
alter table X_SUB_INGREDIENT_MATRIX
  add constraint X_SUB_INGREDIENT_MATRIX_FK3 foreign key (SOURCE_GROUP_CODE)
  references X_SOURCE_GROUPS_REF (SOURCE_GROUP_CODE);
alter table X_SUB_INGREDIENT_MATRIX
  add constraint X_SUB_INGREDIENT_MATRIX_FK4 foreign key (CONVERSION_ID)
  references X_CONVERSION (CONVERSION_ID);
alter table X_SUB_INGREDIENT_MATRIX
  add constraint X_SUB_INGREDIENT_MATRIX_FK5 foreign key (DURATION_CODE)
  references X_DURATION (DURATION_CODE);
alter table X_SUB_INGREDIENT_MATRIX
  add constraint X_SUB_INGREDIENT_MATRIX_FK6 foreign key (SUB_POP_CODE)
  references X_SUB_POP (SUB_POP_CODE);
alter table X_SUB_INGREDIENT_MATRIX
  add constraint X_SUB_INGREDIENT_MATRIX_FK7 foreign key (USE_CODE)
  references X_USE (USE_CODE);
alter table X_SUB_INGREDIENT_MATRIX
  add constraint X_SUB_INGREDIENT_MATRIX_FK8 foreign key (RISK_CODE)
  references X_RISK (RISK_CODE);
alter table X_SUB_INGREDIENT_MATRIX
  add constraint X_SUB_INGREDIENT_MATRIX_FK9 foreign key (STORAGE_CONDITION_GROUP_CODE)
  references X_STORAGE_COND_GROUP_REF (STORAGE_COND_GROUP_CODE);

prompt create triggers
CREATE OR REPLACE TRIGGER "X_SUB_INGREDIENT_MATRIX_TRG"
before insert or update on X_SUB_INGREDIENT_MATRIX
for each row
begin
  if INSERTING then
    if :new.ROW_ID is null then
      select X_SUB_INGREDIENT_MATRIX_SEQ.nextval into :new.ROW_ID from dual;
    end if;
    :new.creation_date := sysdate;
  end if;
  IF :new.ingred_grp_grp_id IS NOT NULL AND
     (
       :new.ingred_grp_grp_id != NVL(:old.ingred_grp_grp_id,-999)
       OR
       :new.group_rule_group_id IS NULL
       OR
       :new.rule_group_id IS NULL
     ) THEN
    BEGIN
      SELECT group_group_id,
             group_id
        INTO :new.group_rule_group_id,
             :new.rule_group_id
        FROM x_ingredient_grp_grp_ref
       WHERE row_id  =  :new.ingred_grp_grp_id;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.ingred_grp_grp_id IS NULL THEN
--    :new.group_rule_group_id := NULL;
--    :new.rule_group_id := NULL;
  END IF;
  IF :new.prod_mono_id IS NOT NULL AND
     (
       :new.prod_mono_id != NVL(:old.prod_mono_id,-999)
       OR
       :new.product_mono_code IS NULL
       OR
       :new.mono_code IS NULL
     ) THEN
    BEGIN
      SELECT product_mono_code,
             mono_code
        INTO :new.product_mono_code,
             :new.mono_code
        FROM x_product_monograph_ref
       WHERE row_id  =  :new.prod_mono_id;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.prod_mono_id IS NULL THEN
--    :new.product_mono_code := NULL;
--    :new.mono_code         := NULL;
  END IF;
  IF :new.ingred_id_nhpid IS NOT NULL AND
      (
        :new.ingred_id_nhpid != NVL(:old.ingred_id_nhpid, -999)
        OR
        :new.parent_nhpid_name IS NULL
      ) THEN
    BEGIN
      SELECT ingred_authorized_name_eng
        INTO :new.parent_nhpid_name
        FROM ingredients
       WHERE ingred_id  =  :new.ingred_id_nhpid;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.ingred_id_nhpid IS NULL THEN
--    :new.parent_nhpid_name  :=  NULL;
  END IF;
  IF :new.subing_id_nhpid IS NOT NULL AND
      (
        :new.subing_id_nhpid != NVL(:old.subing_id_nhpid, -999)
        OR
        :new.subing_name_nhpid IS NULL
      ) THEN
    BEGIN
      SELECT ingred_authorized_name_eng
        INTO :new.subing_name_nhpid
        FROM ingredients
       WHERE ingred_id  =  :new.subing_id_nhpid;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.subing_id_nhpid IS NULL THEN
--    :new.subing_name_nhpid  :=  NULL;
  END IF;
  IF :new.use_code IS NOT NULL AND
    (
      :new.use_code != NVL(:old.use_code, '~~XXXXXXxxxx')
        OR
      :new.use_decode IS NULL
    )  THEN
    BEGIN
      SELECT use_decode
        INTO :new.use_decode
        FROM x_use
       WHERE use_code  =  :new.use_code;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.use_code IS NULL THEN
--    :new.use_decode := NULL;
  END IF;
  IF :new.risk_code IS NOT NULL AND
     (
       :new.risk_code != NVL(:old.risk_code, '~~XXXXXXxxxx')
       OR
       :new.risk_decode IS NULL
     ) THEN
    BEGIN
      SELECT risk_decode
        INTO :new.risk_decode
        FROM x_risk
       WHERE risk_code  =  :new.risk_code;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.risk_code IS NULL THEN
--    :new.risk_decode := NULL;
  END IF;
  IF :new.dfu_code IS NOT NULL AND
     (
       :new.dfu_code != NVL(:old.dfu_code, 'XXXXXXxxxx')
       OR
       :new.dfu_decode IS NULL
     ) THEN
    BEGIN
      SELECT dfu_group_decode
        INTO :new.dfu_decode
        FROM x_dfu_group_ref
       WHERE dfu_group_code  =  :new.dfu_code;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.dfu_code IS NULL THEN
--    :new.dfu_decode := NULL;
  END IF;
  IF :new.sub_pop_code IS NOT NULL AND
     (
       :new.sub_pop_code != NVL(:old.sub_pop_code, '~~XXXXXXxxxx')
       OR
       :new.sub_pop_decode IS NULL
      ) THEN
    BEGIN
      SELECT sub_pop_decode
        INTO :new.sub_pop_decode
        FROM x_sub_pop
       WHERE sub_pop_code  =  :new.sub_pop_code;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.sub_pop_code IS NULL THEN
--    :new.sub_pop_decode := NULL;
  END IF;
  IF :new.adminrt_id IS NOT NULL AND
      (
         :new.adminrt_id != NVL(:old.adminrt_id, -1)
         OR
         :new.roa IS null
       ) THEN
    BEGIN
      SELECT adminrt_name_eng
        INTO :new.roa
        FROM administration_routes
       WHERE adminrt_id  =  :new.adminrt_id;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
--  ELSIF :new.adminrt_id IS NULL THEN
--    :new.roa    := NULL;
  END IF;
  :new.lastupdate_date := sysdate;
  :new.useracc_id := nvl(NHPID_APEX_UTIL.GET_APEX_USER_ID,0);
end;
/

prompt grant object privileges 
grant select on X_SUB_INGREDIENT_MATRIX to NHPDWEB_OWNER;
grant select on X_SUB_INGREDIENT_MATRIX to NHPDWEB_USER;
grant select, insert, update, delete, alter on X_SUB_INGREDIENT_MATRIX to NHPID_APEX;
grant select, insert, update, delete, alter on X_SUB_INGREDIENT_MATRIX to RL__NHPDWEB_ADMIN;
grant select on X_SUB_INGREDIENT_MATRIX to RL__NHPDWEB_READ;


prompt ---------
prompt compile schema and show errors

exec dbms_utility.compile_schema(user);

select object_name, object_type from user_objects where status = 'INVALID';

set linesize 1000 pagesize 9999 trimspool on
col name for a30
col line for 99999
col message_number for 99999
col text for a132
select t.name,
       t.line,
       t.message_number,
       t.text
  from user_errors t
;

spool off

